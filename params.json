{"name":"Multi-memcached","tagline":"Multiple memcached connection handler for Laravel Cache and elasticache support","body":"Multiple Memcached Connections\r\n===============\r\n\r\nMultiple memcached connection handler for Laravel cache and elasticache support. There is also support for `getMulti`, `putMulti`, `foreverMulti` and `forgetMulti` specifically for memcached only.\r\n\r\n__The cache driver can not be swapped if you make use of the additional `getMulti`, `putMulti`, `foreverMulti` or `forgetMulti` functions or the `get`, `put`, `forever`, `forget` with arrays. They are specific for memcached only!__\r\n\r\n## Installation\r\n\r\nYou can install the package using the [Composer](https://getcomposer.org/) package manager:\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"clowdy/multi-memcached\": \"0.2.*\"\r\n    }\r\n}\r\n```\r\n\r\nUpdate `app/config/app.php` with the new service provider.\r\n\r\n```php\r\n'providers' => array(\r\n    ...\r\n    //'Illuminate\\Cache\\CacheServiceProvider',\r\n    'Clowdy\\Cache\\CacheServiceProvider',\r\n    ...\r\n)\r\n```\r\n\r\n## Configuration\r\n\r\nThe package makes use the the existing memcached configs in `app/config/cache.php`, with a slightly modified structure.\r\n\r\nExample:\r\n```php\r\n...\r\n'memcached' => array(\r\n    'default' => 'data1',\r\n\r\n    'connections' => array(\r\n\r\n        // cluster\r\n        'data1' => array(\r\n            array('host' => '127.0.0.1', 'port' => 11211, 'weight' => 100),\r\n            array('host' => '127.0.0.1', 'port' => 11212, 'weight' => 100)\r\n        ),\r\n\r\n        // single node\r\n        'data2' => array(\r\n            array('host' => '127.0.0.1', 'port' => 11213, 'weight' => 100),\r\n        ),\r\n\r\n        // elasticache cluster\r\n        'data3' => array(\r\n            'elasticache' => true\r\n            'servers' => array(\r\n                array('host' => 'memcached.cache.amazonaws.com', 'port' => 11211, 'weight' => 100),\r\n            ),\r\n        )\r\n    )\r\n),\r\n```\r\n\r\nAny other providers in Laravel that make use of memcached will use the default connection. For example the `session` provider using the `memcached` driver will use the default connection.\r\n\r\n## Example Usage\r\n\r\n```php\r\nCache::connection('data1')->get('somekey');\r\n\r\n// or you can omit the connection method to use the default connection.\r\n\r\nCache::get('somekey');\r\n\r\n// also perform a multi get using an array\r\n\r\nCache::get(['key1', 'key2']);\r\n```\r\n\r\nor\r\n\r\n```php\r\n<?php namespace Some\\App;\r\n\r\nuse Illuminate\\Cache\\Repository as CacheRepository;\r\n\r\nclass SomeClass\r\n{\r\n    protected $cache;\r\n\r\n    public function __construct(CacheRepository $cache)\r\n    {\r\n        $this->cache = $cache;\r\n    }\r\n\r\n    public function update($data)\r\n    {\r\n        $this->cache->put('key', $data, 60);\r\n        $this->update2($data);\r\n    }\r\n\r\n    public function update2($data)\r\n    {\r\n        $this->cache->connection('data2')->put('key', $data, 60);\r\n        $this->update3(['key' => $data]);\r\n    }\r\n\r\n    public function update3(array $data)\r\n    {\r\n        $this->cache->connection('data3')->put(array_keys($data), array_values($data), 60);\r\n\r\n        // or\r\n        \r\n        $this->cache->connection('data3')->putMulti($data, 60);\r\n    }\r\n}\r\n```\r\nHi, indonesia. Hee :)","google":"supriyantomaftuh","note":"Don't delete this file! It's used internally to help with page regeneration."}